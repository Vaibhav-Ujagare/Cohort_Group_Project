generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_details {
  id                            Int                             @id @default(autoincrement())
  email                         String                          @unique
  password                      String
  frist_name                    String
  last_name                     String
  refreshToken                  String?
  role                          ROLE
  github_link                   String
  hashnode_link                 String
  peerlist_link                 String
  tweeter_link                  String
  group_details                 group_details[]
  group_joining_request_details group_joining_request_details[]
  notice_board_details          notice_board_details[]
  user_cohort_mapping           user_cohort_mapping[]
  user_group_mapping            user_group_mapping[]
}

model group_details {
  id                            Int                             @id @default(autoincrement())
  group_name                    String                          @unique
  group_desc                    String
  is_published                  Boolean                         @default(false)
  admin_id                      Int
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  created_by                    user_details                    @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  group_joining_request_details group_joining_request_details[]
  user_group_mapping            user_group_mapping[]
}

model user_cohort_mapping {
  id        Int            @id @default(autoincrement())
  user_id   Int
  cohort_id Int
  cohort    cohort_details @relation(fields: [cohort_id], references: [id], onDelete: Cascade)
  user      user_details   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model cohort_details {
  id          Int                   @id @default(autoincrement())
  cohort_name String                @unique
  userCohorts user_cohort_mapping[]
}

model group_joining_request_details {
  id                   Int           @id @default(autoincrement())
  group_id             Int
  user_id              Int
  request_note_by_user String?
  rejection_remark     String?
  requested_on         DateTime?
  responded_on         DateTime?
  group                group_details @relation(fields: [group_id], references: [id])
  user                 user_details  @relation(fields: [user_id], references: [id])
}

model notice_board_details {
  id         Int          @id @default(autoincrement())
  board_text String?
  group_id   String
  user_id    Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  handled_by user_details @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_group_mapping {
  id               Int           @id @default(autoincrement())
  group_id         Int
  user_id          Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  joining_date     DateTime?
  leaving_date     DateTime?
  leaving_reason   String?
  removed_reason   String?
  removed_date     DateTime?
  is_active_member Boolean?      @default(false)
  group_details    group_details @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user_details     user_details  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum ROLE {
  ADMIN
  LEADER
  MEMBER
}
